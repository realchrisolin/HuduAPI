{
    "basePath": "/api/v1",
    "consumes": [
        "application/x-www-form-urlencoded",
        "multipart/form-data"
    ],
    "definitions": {
        "Article": {
            "properties": {
                "company_id": {
                    "description": "The unique company ID for non-global articles.",
                    "format": "int64",
                    "type": "integer"
                },
                "content": {
                    "description": "The HTML content of the article.",
                    "type": "string"
                },
                "created_at": {
                    "description": "The date and time when the article was created.",
                    "format": "date-time",
                    "type": "string"
                },
                "draft": {
                    "description": "A flag that signifies if the article is a draft.",
                    "type": "boolean"
                },
                "enable_sharing": {
                    "description": "A flag that signifies if the article is shareable.",
                    "type": "boolean"
                },
                "folder_id": {
                    "description": "The unique folder ID where the article lives.",
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "description": "The unique ID of the article.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the article.",
                    "type": "string"
                },
                "object_type": {
                    "description": "The object type is Article.",
                    "type": "string"
                },
                "public_photos": {
                    "description": "A list of public photos.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "share_url": {
                    "description": "A url for shareable articles.",
                    "type": "string"
                },
                "slug": {
                    "description": "The url slug of the article.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The date and time when the article was last updated.",
                    "format": "date-time",
                    "type": "string"
                },
                "url": {
                    "description": "The url of the article.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Asset": {
            "properties": {
                "archived": {
                    "description": "Indicates whether the asset is archived or not",
                    "type": "boolean"
                },
                "asset_layout_id": {
                    "description": "The identifier of the asset layout associated with the asset",
                    "type": "number"
                },
                "asset_type": {
                    "description": "The category of the asset",
                    "type": "string"
                },
                "cards": {
                    "description": "A list of cards associated with the asset (if available)",
                    "items": {
                        "$ref": "#/definitions/Integrator_Card"
                    },
                    "type": "array"
                },
                "company_id": {
                    "description": "The identifier of the company to which the asset belongs",
                    "type": "number"
                },
                "company_name": {
                    "description": "The name of the company to which the asset belongs",
                    "type": "string"
                },
                "created_at": {
                    "description": "The date and time when the asset was created",
                    "format": "date-time",
                    "type": "string"
                },
                "fields": {
                    "description": "A list of fields associated with the asset",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The identifier of the field",
                                "type": "number"
                            },
                            "label": {
                                "description": "The label of the field",
                                "type": "string"
                            },
                            "position": {
                                "description": "The position of the field in the asset's layout",
                                "type": "number"
                            },
                            "value": {
                                "description": "The value stored in the field",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The unique identifier of the asset",
                    "type": "number"
                },
                "name": {
                    "description": "The name of the asset",
                    "type": "string"
                },
                "object_type": {
                    "description": "The type of object the asset represents",
                    "type": "string"
                },
                "primary_mail": {
                    "description": "The primary email associated with the asset (if available)",
                    "type": "string"
                },
                "primary_manufacturer": {
                    "description": "The primary manufacturer of the asset (if available)",
                    "type": "string"
                },
                "primary_model": {
                    "description": "The primary model of the asset (if available)",
                    "type": "string"
                },
                "primary_serial": {
                    "description": "The primary serial number of the asset (if available)",
                    "type": "string"
                },
                "slug": {
                    "description": "The URL slug used to identify the asset",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The date and time when the asset was last updated",
                    "format": "date-time",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the asset page",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Asset_Layout": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                },
                "created_at": {
                    "format": "date-time",
                    "type": "string"
                },
                "fields": {
                    "items": {
                        "$ref": "#/definitions/Asset_Layout_Field"
                    },
                    "type": "array"
                },
                "icon": {
                    "type": "string"
                },
                "icon_color": {
                    "type": "string"
                },
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "include_comments": {
                    "type": "boolean"
                },
                "include_files": {
                    "type": "boolean"
                },
                "include_passwords": {
                    "type": "boolean"
                },
                "include_photos": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "sidebar_folder_id": {
                    "description": "Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Asset_Layout_Field": {
            "properties": {
                "expiration": {
                    "type": "boolean"
                },
                "field_type": {
                    "type": "string"
                },
                "hint": {
                    "type": "string"
                },
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "is_destroyed": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "linkable_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "max": {
                    "description": "Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "min": {
                    "description": "Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "options": {
                    "type": "string"
                },
                "position": {
                    "format": "int32",
                    "type": "integer"
                },
                "required": {
                    "description": "Can be null.",
                    "type": "boolean"
                },
                "show_in_list": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Asset_Password": {
            "properties": {
                "company_id": {
                    "description": "Identifier of the company to which the password belongs",
                    "format": "int64",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamp when the password was created",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "Description or notes related to the password",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the asset password",
                    "format": "int64",
                    "type": "integer"
                },
                "login_url": {
                    "description": "URL for the login page associated with the password. Can be null.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the password",
                    "type": "string"
                },
                "otp_secret": {
                    "description": "Secret key for one-time passwords (OTP), if used",
                    "type": "string"
                },
                "password": {
                    "description": "The actual password string",
                    "type": "string"
                },
                "password_folder_id": {
                    "description": "ID of the folder in which the password is stored, if any. Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "password_folder_name": {
                    "description": "Name of the folder in which the password is stored, if any. Can be null.",
                    "type": "string"
                },
                "password_type": {
                    "description": "Type or category of the password. Can be null.",
                    "type": "string"
                },
                "passwordable_id": {
                    "description": "ID of the related object (e.g., 'Website') for the password. Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "passwordable_type": {
                    "description": "Type of the related object for the password (e.g., 'Asset', 'Website')",
                    "type": "string"
                },
                "slug": {
                    "description": "URL-friendly identifier for the password",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the password was last updated",
                    "format": "date-time",
                    "type": "string"
                },
                "url": {
                    "description": "URL related to the password, if applicable",
                    "type": "string"
                },
                "username": {
                    "description": "Username associated with the password",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "passwordable_type",
                "company_id",
                "name",
                "username",
                "slug",
                "description",
                "password",
                "otp_secret",
                "url"
            ],
            "type": "object"
        },
        "Company": {
            "properties": {
                "address_line_1": {
                    "description": "The first line of the company's address.",
                    "type": "string"
                },
                "address_line_2": {
                    "description": "The second line of the company's address. Can be null.",
                    "type": "string"
                },
                "archived": {
                    "description": "Indicates if the company has been archived.",
                    "type": "boolean"
                },
                "city": {
                    "description": "The city where the company is located.",
                    "type": "string"
                },
                "company_type": {
                    "description": "The type of the company. Can be null.",
                    "type": "string"
                },
                "country_name": {
                    "description": "The name of the country where the company is located. Can be null.",
                    "type": "string"
                },
                "created_at": {
                    "description": "The date and time when the company was created.",
                    "format": "date-time",
                    "type": "string"
                },
                "fax_number": {
                    "description": "The company's fax number.",
                    "type": "string"
                },
                "full_url": {
                    "description": "The full URL of the company within the application.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the company.",
                    "format": "int64",
                    "type": "integer"
                },
                "id_number": {
                    "description": "A custom set identificaiton number.",
                    "type": "string"
                },
                "integrations": {
                    "description": "A list of integrations associated with the company.",
                    "items": {
                        "$ref": "#/definitions/Company_Integration"
                    },
                    "type": "array"
                },
                "knowledge_base_url": {
                    "description": "The URL for the company's knowledge base within the application.",
                    "type": "string"
                },
                "name": {
                    "description": "The full name of the company.",
                    "type": "string"
                },
                "nickname": {
                    "description": "The nickname or short name of the company. Can be null.",
                    "type": "string"
                },
                "notes": {
                    "description": "Additional notes or information about the company. Can be null.",
                    "type": "string"
                },
                "object_type": {
                    "description": "The type of the object, in this case, \"Company\".",
                    "type": "string"
                },
                "parent_company_id": {
                    "description": "The unique identifier of the parent company. Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "parent_company_name": {
                    "description": "The name of the parent company. Can be null.",
                    "type": "string"
                },
                "passwords_url": {
                    "description": "The URL for the company's passwords within the application.",
                    "type": "string"
                },
                "phone_number": {
                    "description": "The company's phone number.",
                    "type": "string"
                },
                "slug": {
                    "description": "The URL-friendly identifier of the company.",
                    "type": "string"
                },
                "state": {
                    "description": "The state or province where the company is located.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The date and time when the company was last updated.",
                    "format": "date-time",
                    "type": "string"
                },
                "url": {
                    "description": "The URL path of the company within the application.",
                    "type": "string"
                },
                "website": {
                    "description": "The company's website URL.",
                    "type": "string"
                },
                "zip": {
                    "description": "The zip or postal code of the company's location.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Company_Integration": {
            "properties": {
                "company_id": {
                    "description": "The unique identifier of the company associated with the integration.",
                    "format": "int64",
                    "type": "integer"
                },
                "company_name": {
                    "description": "The name of the company associated with the integration.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the integration.",
                    "format": "int64",
                    "type": "integer"
                },
                "identifier": {
                    "description": "The identifier of the integration. Can be null.",
                    "type": "string"
                },
                "integrator_id": {
                    "description": "The unique identifier of the integrator.",
                    "format": "int64",
                    "type": "integer"
                },
                "integrator_name": {
                    "description": "The name of the integrator.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the integration.",
                    "type": "string"
                },
                "potential_company_id": {
                    "description": "The unique identifier of the potential company associated with the integration. Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "sync_id": {
                    "description": "The unique identifier for the synchronization.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Expiration": {
            "properties": {
                "account_id": {
                    "description": "The account ID associated with the expiration",
                    "type": "number"
                },
                "asset_field_id": {
                    "description": "The asset field ID associated with the expiration (if any). Can be null.",
                    "type": "number"
                },
                "asset_layout_field_id": {
                    "description": "The asset layout field ID associated with the expiration (if any), Can be null.",
                    "type": "number"
                },
                "company_id": {
                    "description": "The company ID associated with the expiration",
                    "type": "number"
                },
                "created_at": {
                    "description": "The timestamp when the expiration was created",
                    "format": "date-time",
                    "type": "string"
                },
                "date": {
                    "description": "The expiration date",
                    "format": "date",
                    "type": "string"
                },
                "discarded_at": {
                    "description": "The timestamp when the expiration was discarded (if any). Can be null.",
                    "format": "date-time",
                    "type": "string"
                },
                "expiration_type": {
                    "description": "The type of expiration (e.g., domain)",
                    "type": "string"
                },
                "expirationable_id": {
                    "description": "The ID of the object associated with the expiration",
                    "type": "number"
                },
                "expirationable_type": {
                    "description": "The type of object associated with the expiration (e.g., Website)",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the expiration",
                    "type": "number"
                },
                "sync_id": {
                    "description": "The sync ID associated with the expiration (if any). Can be null",
                    "type": "number"
                },
                "updated_at": {
                    "description": "The timestamp when the expiration was last updated",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "date",
                "expirationable_type",
                "expirationable_id",
                "account_id",
                "company_id",
                "expiration_type"
            ],
            "type": "object"
        },
        "Folder": {
            "properties": {
                "company_id": {
                    "description": "The ID of the associated company, if any. Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "created_at": {
                    "description": "The timestamp of folder creation",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of the folder",
                    "type": "string"
                },
                "icon": {
                    "description": "The icon associated with the folder. Can be null",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the folder",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the folder",
                    "type": "string"
                },
                "parent_folder_id": {
                    "description": "The ID of the parent folder, if any. Can be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "The timestamp of the last folder update",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "name"
            ],
            "type": "object"
        },
        "Integrator_Card": {
            "description": "Represents an Integrator Card containing information about an integration with an external system.",
            "properties": {
                "data": {
                    "description": "A JSON object containing additional data about the integrated entity.",
                    "type": "object"
                },
                "id": {
                    "description": "The unique identifier of the Integrator Card.",
                    "format": "int64",
                    "type": "integer"
                },
                "integrator_id": {
                    "description": "The unique identifier of the associated external integrator.",
                    "format": "int64",
                    "type": "integer"
                },
                "integrator_name": {
                    "description": "The name of the associated external integrator.",
                    "type": "string"
                },
                "link": {
                    "description": "The URL to access the integrated external system.",
                    "type": "string"
                },
                "primary_field": {
                    "description": "The primary field associated with the Integrator Card, if any. Can be null.",
                    "type": "string"
                },
                "sync_id": {
                    "description": "The unique identifier of the synchronized entity in the external system.",
                    "format": "int64",
                    "type": "integer"
                },
                "sync_identifier": {
                    "description": "The unique identifier or name of the synchronized entity in the external system, if any. Can be null.",
                    "type": "string"
                },
                "sync_type": {
                    "description": "The type of synchronization with the external system.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IpAddress": {
            "properties": {
                "address": {
                    "description": "The IP address.",
                    "type": "string"
                },
                "asset_id": {
                    "description": "The identifier of the asset associated with this IP address.",
                    "format": "int64",
                    "type": "integer"
                },
                "comments": {
                    "description": "Additional comments about the IP address.",
                    "type": "string"
                },
                "company_id": {
                    "description": "The identifier of the company that owns this IP address.",
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "description": "A brief description of the IP address.",
                    "type": "string"
                },
                "fqdn": {
                    "description": "The Fully Qualified Domain Name associated with the IP address.",
                    "type": "string"
                },
                "network_id": {
                    "description": "The identifier of the network to which this IP address belongs.",
                    "format": "int64",
                    "type": "integer"
                },
                "status": {
                    "description": "The status of the IP address. Must be one of: unassigned, assigned, reserved, deprecated, dhcp, or slaac",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MagicDash": {
            "properties": {
                "company_id": {
                    "description": "The unique identifier of the associated company",
                    "format": "int64",
                    "type": "integer"
                },
                "company_name": {
                    "description": "The name of the associated company",
                    "type": "string"
                },
                "content": {
                    "description": "The MagicDash item's content (optional). Can Be null.",
                    "type": "string"
                },
                "content_link": {
                    "description": "The link associated with the MagicDash item's content (optional). Can Be null.",
                    "type": "string"
                },
                "icon": {
                    "description": "The icon associated with the MagicDash item (optional). Can Be null.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the MagicDash item",
                    "format": "int64",
                    "type": "integer"
                },
                "image_url": {
                    "description": "The URL of the image associated with the MagicDash item (optional). Can Be null.",
                    "type": "string"
                },
                "message": {
                    "description": "The message content of the MagicDash item",
                    "type": "string"
                },
                "shade": {
                    "description": "The background shade of the MagicDash item (optional). Can Be null.",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the MagicDash item",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "title",
                "message",
                "company_id",
                "company_name"
            ],
            "type": "object"
        },
        "Matcher": {
            "properties": {
                "company_id": {
                    "description": "Can be null.",
                    "type": "integer"
                },
                "company_name": {
                    "description": "Can be null.",
                    "type": "string"
                },
                "id": {
                    "example": 55,
                    "type": "integer"
                },
                "identifier": {
                    "description": "Can be null.",
                    "type": "string"
                },
                "integrator_id": {
                    "example": 4,
                    "type": "integer"
                },
                "integrator_name": {
                    "example": "autotask",
                    "type": "string"
                },
                "name": {
                    "example": "Green Mile 24",
                    "type": "string"
                },
                "potential_company_id": {
                    "description": "Can be null.",
                    "type": "integer"
                },
                "sync_id": {
                    "example": 29683607,
                    "type": "integer"
                }
            },
            "required": [
                "id",
                "integrator_id",
                "integrator_name",
                "sync_id",
                "name"
            ],
            "type": "object"
        },
        "Network": {
            "properties": {
                "address": {
                    "description": "The network address, typically in CIDR notation.",
                    "type": "string"
                },
                "company_id": {
                    "description": "The identifier of the company that owns this network.",
                    "format": "int64",
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date and time when the network was created.",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of the network.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for the network.",
                    "format": "int64",
                    "type": "integer"
                },
                "location_id": {
                    "description": "The identifier of the location associated with this network.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the network.",
                    "type": "string"
                },
                "network_type": {
                    "description": "The type of network, represented as an integer.",
                    "type": "integer"
                },
                "slug": {
                    "description": "A slug representing the network.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The date and time when the network was last updated.",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Password_Folder": {
            "properties": {
                "company_id": {
                    "description": "The ID of the associated company, if any. Can Be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "created_at": {
                    "description": "The timestamp of password folder creation",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of the password folder",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the password folder",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the password folder",
                    "type": "string"
                },
                "slug": {
                    "description": "A slug representing the password folder.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The timestamp of the last password folder update",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Procedure": {
            "properties": {
                "asset": {
                    "description": "The associated asset, if any. Can Be null.",
                    "type": "string"
                },
                "company_id": {
                    "description": "The unique identifier of the company this procedure belongs to.",
                    "format": "int64",
                    "type": "integer"
                },
                "company_name": {
                    "description": "The name of the associated company.",
                    "example": "test TWO",
                    "type": "string"
                },
                "completed": {
                    "description": "The number of completed tasks in the procedure.",
                    "example": 0,
                    "type": "integer"
                },
                "completion_percentage": {
                    "description": "The completion percentage of the procedure.",
                    "example": "0%",
                    "type": "string"
                },
                "created_at": {
                    "description": "The date and time when the procedure was created.",
                    "example": "2022-12-09T22:23:29.894Z",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of the procedure. Can Be null.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the procedure.",
                    "example": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the procedure.",
                    "example": "API TEST",
                    "type": "string"
                },
                "object_type": {
                    "description": "The type of object the procedure represents.",
                    "example": "Process",
                    "type": "string"
                },
                "parent_procedure": {
                    "description": "The parent procedure, if any. Can Be null.",
                    "type": "string"
                },
                "procedure_tasks_attributes": {
                    "description": "A list of attributes for the tasks associated with the procedure.",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "share_url": {
                    "description": "The URL for sharing the procedure.",
                    "example": "http://localhost:3000/shared_process/S549vMc8b8PmWWMESwB6qTLC",
                    "type": "string"
                },
                "slug": {
                    "description": "The URL-friendly unique identifier of the procedure.",
                    "example": "api-test-7cbe6a6458e9",
                    "type": "string"
                },
                "total": {
                    "description": "The total number of tasks in the procedure.",
                    "example": 0,
                    "type": "integer"
                },
                "updated_at": {
                    "description": "The date and time when the procedure was last updated.",
                    "example": "2022-12-09T22:23:29.894Z",
                    "format": "date-time",
                    "type": "string"
                },
                "url": {
                    "description": "The URL for accessing the procedure.",
                    "example": "/processes/api-test-7cbe6a6458e9",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProcedureTask": {
            "properties": {
                "completed": {
                    "description": "Indicates whether the task is completed.",
                    "type": "boolean"
                },
                "completed_at": {
                    "description": "The date and time when the task was completed.",
                    "format": "date-time",
                    "type": "string"
                },
                "created_at": {
                    "description": "The date and time when the task was created.",
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "description": "The unique ID of the procedure task.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the procedure task.",
                    "type": "string"
                },
                "priority": {
                    "description": "The priority level of the task.",
                    "enum": [
                        "unsure",
                        "low",
                        "normal",
                        "high",
                        "urgent"
                    ],
                    "type": "string"
                },
                "procedure_id": {
                    "description": "The ID of the procedure this task belongs to.",
                    "format": "int64",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "The date and time when the task was last updated.",
                    "format": "date-time",
                    "type": "string"
                },
                "user_id": {
                    "description": "The ID of the user assigned to the task, if any.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "id",
                "name",
                "procedure_id"
            ],
            "type": "object"
        },
        "PublicPhoto": {
            "description": "A public photo associated with a record.",
            "properties": {
                "id": {
                    "description": "The ID of the public photo.",
                    "type": "integer"
                },
                "record_id": {
                    "description": "The ID of the record the public photo is associated with.",
                    "type": "integer"
                },
                "record_type": {
                    "description": "The type of record the public photo is associated with (e.g., Article).",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the public photo.",
                    "format": "uri",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RackStorage": {
            "properties": {
                "company_id": {
                    "description": "The unique ID of the company.",
                    "format": "int64",
                    "type": "integer"
                },
                "created_at": {
                    "description": "The date and time when the rack storage was created.",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the rack storage.",
                    "type": "string"
                },
                "discarded_at": {
                    "description": "The date and time when the rack storage was discarded. Can Be null.",
                    "format": "date-time",
                    "type": "string"
                },
                "height": {
                    "description": "The height of the rack storage.",
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "description": "The unique ID of the rack storage.",
                    "format": "int64",
                    "type": "integer"
                },
                "location_id": {
                    "description": "The unique ID of the location of the rack storage.",
                    "format": "int64",
                    "type": "integer"
                },
                "max_wattage": {
                    "description": "The maximum wattage the rack storage can handle.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the rack storage.",
                    "type": "string"
                },
                "starting_unit": {
                    "description": "The starting unit of the rack storage.",
                    "format": "int64",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "The date and time when the rack storage was last updated.",
                    "format": "date-time",
                    "type": "string"
                },
                "width": {
                    "description": "The width of the rack storage.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "RackStorageItem": {
            "properties": {
                "asset_id": {
                    "description": "The unique ID of the asset.",
                    "format": "int64",
                    "type": "integer"
                },
                "asset_name": {
                    "description": "The name of the asset.",
                    "type": "string"
                },
                "asset_url": {
                    "description": "The URL of the asset.",
                    "type": "string"
                },
                "company_id": {
                    "description": "The unique ID of the company.",
                    "format": "int64",
                    "type": "integer"
                },
                "end_unit": {
                    "description": "The end unit of the rack storage item.",
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "description": "The unique ID of the rack storage item.",
                    "format": "int64",
                    "type": "integer"
                },
                "max_wattage": {
                    "description": "The maximum wattage of the rack storage item.",
                    "format": "int64",
                    "type": "integer"
                },
                "power_draw": {
                    "description": "The power draw of the rack storage item.",
                    "format": "int64",
                    "type": "integer"
                },
                "rack_storage_role_description": {
                    "description": "The description of the rack storage role.",
                    "type": "string"
                },
                "rack_storage_role_hex_color": {
                    "description": "The hex color of the rack storage role.",
                    "type": "string"
                },
                "rack_storage_role_id": {
                    "description": "The unique ID of the rack storage role.",
                    "format": "int64",
                    "type": "integer"
                },
                "rack_storage_role_name": {
                    "description": "The name of the rack storage role.",
                    "type": "string"
                },
                "reserved_message": {
                    "description": "The reserved message for the rack storage item.",
                    "type": "string"
                },
                "side": {
                    "description": "The side of the rack storage item.",
                    "format": "int32",
                    "type": "integer"
                },
                "start_unit": {
                    "description": "The start unit of the rack storage item.",
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "description": "The status of the rack storage item.",
                    "format": "int32",
                    "type": "integer"
                },
                "url": {
                    "description": "The URL of the rack storage item.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Relation": {
            "properties": {
                "description": {
                    "description": "The description of the relation (optional). Can Be null.",
                    "type": "string"
                },
                "fromable_id": {
                    "description": "The ID of the origin entity involved in the relation.",
                    "type": "integer"
                },
                "fromable_type": {
                    "description": "The type of the origin entity involved in the relation.",
                    "type": "string"
                },
                "fromable_url": {
                    "description": "The URL of the origin entity involved in the relation.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the relation.",
                    "type": "integer"
                },
                "is_inverse": {
                    "description": "Indicates whether the relation is inverse or not.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the relation.",
                    "type": "string"
                },
                "toable_id": {
                    "description": "The ID of the destination entity involved in the relation.",
                    "type": "integer"
                },
                "toable_type": {
                    "description": "The type of the destination entity involved in the relation.",
                    "type": "string"
                },
                "toable_url": {
                    "description": "The URL of the destination entity involved in the relation.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Upload": {
            "properties": {
                "archived_at": {
                    "description": "Date when the file was archived. Null if the file is not archived.",
                    "format": "date-time",
                    "type": "string"
                },
                "created_date": {
                    "description": "Date when the file was uploaded",
                    "format": "date-time",
                    "type": "string"
                },
                "ext": {
                    "description": "File extension",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the upload",
                    "type": "integer"
                },
                "mime": {
                    "description": "MIME type of the file",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the file",
                    "type": "string"
                },
                "size": {
                    "description": "Size of the file",
                    "type": "string"
                },
                "uploadable_id": {
                    "description": "ID of the object the file is associated with",
                    "type": "integer"
                },
                "uploadable_type": {
                    "description": "Type of the object the file is associated with",
                    "type": "string"
                },
                "url": {
                    "description": "URL where the file can be accessed",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "url",
                "name",
                "ext",
                "mime",
                "size",
                "created_date"
            ],
            "type": "object"
        },
        "User": {
            "properties": {
                "accepted_invite": {
                    "description": "Indicates if the user has accepted an invite.",
                    "type": "boolean"
                },
                "archived": {
                    "description": "Indicates if the user is archived (discarded).",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "The timestamp when the user was created.",
                    "format": "date-time",
                    "type": "string"
                },
                "currently_signed_in": {
                    "description": "Indicates if the user is currently signed in.",
                    "type": "boolean"
                },
                "email": {
                    "description": "The email address of the user.",
                    "format": "email",
                    "type": "string"
                },
                "first_name": {
                    "description": "The first name of the user.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the user.",
                    "format": "int64",
                    "type": "integer"
                },
                "last_name": {
                    "description": "The last name of the user.",
                    "type": "string"
                },
                "last_sign_in_at": {
                    "description": "Timestamp of the last sign-in.",
                    "format": "date-time",
                    "type": "string"
                },
                "last_sign_in_ip": {
                    "description": "IP address from the last sign-in.",
                    "type": "string"
                },
                "otp_required_for_login": {
                    "description": "Indicates if OTP is required for logging in.",
                    "type": "boolean"
                },
                "phone_number": {
                    "description": "The phone number of the user.",
                    "type": "string"
                },
                "portal_member_company_id": {
                    "description": "The ID of the associated company, if the user is a portal member. Can Be null.",
                    "format": "int64",
                    "type": "integer"
                },
                "score_30_days": {
                    "description": "The user's score over the past 30 days.",
                    "format": "int32",
                    "type": "integer"
                },
                "score_90_days": {
                    "description": "The user's score over the past 90 days.",
                    "format": "int32",
                    "type": "integer"
                },
                "score_all_time": {
                    "description": "The user's all-time score.",
                    "format": "int32",
                    "type": "integer"
                },
                "security_level": {
                    "description": "Security level assigned to the user.",
                    "type": "string"
                },
                "sign_in_count": {
                    "description": "The number of times the user has signed in.",
                    "format": "int32",
                    "type": "integer"
                },
                "slug": {
                    "description": "A slug representing the user.",
                    "type": "string"
                },
                "time_zone": {
                    "description": "The time zone of the user.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The timestamp of the last user update.",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Website": {
            "properties": {
                "account_id": {
                    "description": "The ID of the associated account",
                    "type": "integer"
                },
                "asset_field_id": {
                    "description": "The ID of the related asset field (optional)",
                    "type": "integer"
                },
                "asset_type": {
                    "description": "The type of the asset, in this case, 'Website'",
                    "type": "string"
                },
                "code": {
                    "description": "The HTTP response code of the website",
                    "type": "integer"
                },
                "company_id": {
                    "description": "The ID of the associated company",
                    "type": "integer"
                },
                "company_name": {
                    "description": "The name of the associated company",
                    "type": "string"
                },
                "disable_dns": {
                    "description": "Indicates whether DNS checks are disabled for the website",
                    "type": "boolean"
                },
                "disable_ssl": {
                    "description": "Indicates whether SSL checks are disabled for the website",
                    "type": "boolean"
                },
                "disable_whois": {
                    "description": "Indicates whether WHOIS checks are disabled for the website",
                    "type": "boolean"
                },
                "discarded_at": {
                    "description": "The timestamp when the website was discarded (optional)",
                    "format": "date-time",
                    "type": "string"
                },
                "headers": {
                    "description": "HTTP headers associated with the website (optional)",
                    "type": "object"
                },
                "icon": {
                    "description": "The FontAwesome icon related to the website",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the website",
                    "type": "integer"
                },
                "keyword": {
                    "description": "A keyword associated with the website (optional)",
                    "type": "string"
                },
                "message": {
                    "description": "A message related to the website's status",
                    "type": "string"
                },
                "monitor_type": {
                    "description": "The type of monitoring performed on the website",
                    "type": "integer"
                },
                "monitored_at": {
                    "description": "The timestamp when the website was last monitored",
                    "format": "date-time",
                    "type": "string"
                },
                "monitoring_status": {
                    "description": "The monitoring status of the website (e.g., 'up', 'down')",
                    "type": "string"
                },
                "name": {
                    "description": "The URL of the website",
                    "type": "string"
                },
                "notes": {
                    "description": "Additional notes related to the website",
                    "type": "string"
                },
                "object_type": {
                    "description": "The type of the object, in this case, 'Website'",
                    "type": "string"
                },
                "paused": {
                    "description": "Indicates whether the monitoring of the website is paused",
                    "type": "boolean"
                },
                "refreshed_at": {
                    "description": "The timestamp when the website was last refreshed",
                    "format": "date-time",
                    "type": "string"
                },
                "sent_notifications": {
                    "description": "Indicates whether notifications related to the website have been sent",
                    "type": "boolean"
                },
                "slug": {
                    "description": "The URL slug for the website",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the website (e.g., 'ready', 'processing')",
                    "type": "string"
                },
                "url": {
                    "description": "The URL path of the website within the application",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "host": "example.huducloud.com",
    "info": {
        "description": "<p>Welcome to the Hudu REST API documentation. The Hudu REST API enables seamless automation of your IT documentation. The API is organized into various resources, each with its own specific endpoint.</p> \n<p>All API requests require authentication using an API key. To obtain an API key, navigate to <b>Hudu Admin</b> → <b>Basic Information</b> → <b>API Keys</b>. Include the API key in your request headers as shown below:</p>\n<pre>curl https://[YOUR_DOMAIN]/api/v1/companies?page=1 -H \"x-api-key: YOUR_API_KEY_HERE\"</pre>\n<p>You can create and delete API keys at any time.</p>\n<h2>Scoping API Keys</h2>\n<p>API keys can be configured with the following options:</p>\n<p>1. Access to passwords (all REST actions)<br /> 2. Ability to perform destructive actions (DELETE actions)<br /> 3. Ability to perform exports<br /> 4. Specify whitelisted IPs<br /> 5. Specify company scopes</p>\n<p>These options can only be configured during the creation of the key.</p>\n<p>We recommend limiting access and providing only the required permissions for each application.</p>\n<h2>Format</h2>\n<p>All API requests must use JSON format, unless otherwise specified.</p>\n<h2>Names in the API</h2>\n<p>Note that some names in the API may differ from those in your Hudu application:</p>\n<table> <tr>\n    <td>Name in Hudu</td>\n    <td>Name in API</td>\n</tr> <tr>\n    <td>Company (customizable)</td>\n    <td>Company</td>\n</tr> <tr>\n    <td>Password</td>\n    <td>AssetPassword</td>\n</tr> <tr>\n    <td>Knowledge Base Article</td>\n    <td>Article</td>\n</tr> <tr>\n    <td>Process</td>\n    <td>Procedure</td>\n</tr> </table>\n<h2>Pagination</h2>\n<p>API requests are paginated by default. To navigate between pages, simply add ?page=X to your request. Pagination is in sets of 25 results.</p>\n<h2>Rate Limiting</h2>\n<p>The rate limit is set at 300 requests per minute.</p> &copy; 2023 Hudu Technologies, Inc. All rights reserved.",
        "title": "Hudu API Documentation",
        "version": "1.0",
        "x-copyright": "&copy; 2023 Hudu Technologies, Inc. All rights reserved."
    },
    "paths": {
        "/activity_logs": {
            "delete": {
                "description": "This endpoint allows you to delete activity logs from a specific datetime. If the 'delete_unassigned_logs' parameter is set to true, only logs where user_id is nil will be deleted.",
                "operationId": "delete_activity_logs",
                "parameters": [
                    {
                        "description": "Specify the starting datetime from which logs will be deleted; must be in ISO 8601 format",
                        "in": "query",
                        "name": "datetime",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "If true, only deletes logs where user_id is nil",
                        "in": "query",
                        "name": "delete_unassigned_logs",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad Request - Invalid datetime format or missing datetime parameter"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "summary": "Delete activity logs",
                "tags": [
                    "Activity Logs"
                ]
            },
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "This endpoint allows you to fetch activity logs of users with various filtering options.",
                "operationId": "get_activity_logs",
                "parameters": [
                    {
                        "description": "Specify the current page of results to retrieve",
                        "in": "query",
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "description": "Filter logs by a specific user ID",
                        "in": "query",
                        "name": "user_id",
                        "type": "number"
                    },
                    {
                        "description": "Filter logs by a user's email address",
                        "in": "query",
                        "name": "user_email",
                        "type": "string"
                    },
                    {
                        "description": "Filter logs by resource ID; must be used in conjunction with resource_type",
                        "in": "query",
                        "name": "resource_id",
                        "type": "number"
                    },
                    {
                        "description": "Filter logs by resource type (Asset, AssetPassword, Company, Article, etc.); must be used in conjunction with resource_id",
                        "in": "query",
                        "name": "resource_type",
                        "type": "string"
                    },
                    {
                        "description": "Filter logs by the action performed",
                        "in": "query",
                        "name": "action_message",
                        "type": "string"
                    },
                    {
                        "description": "Filter logs starting from a specific date; must be in ISO 8601 format",
                        "in": "query",
                        "name": "start_date",
                        "type": "string"
                    },
                    {
                        "description": "Specify the number of results to return per page",
                        "in": "query",
                        "name": "page_size",
                        "type": "number"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve a list of activity logs",
                "tags": [
                    "Activity Logs"
                ]
            }
        },
        "/api_info": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "This endpoint returns the version and date of your Hudu instance in JSON format:\n  \n{\n  \"version\": \"x.x\",\n  \"date\": \"2021-11-03\"\n}",
                "operationId": "get_api_info",
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "properties": {
                                "date": {
                                    "description": "The date of the Hudu instance",
                                    "type": "string"
                                },
                                "version": {
                                    "description": "The version of the Hudu instance",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Retrieve API information",
                "tags": [
                    "API Info"
                ]
            }
        },
        "/articles": {
            "get": {
                "operationId": "get_articles",
                "parameters": [
                    {
                        "description": "Filter by article name",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter by company_id",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Get current page of results",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by draft status",
                        "in": "query",
                        "name": "draft",
                        "type": "boolean"
                    },
                    {
                        "description": "If true, filter by public articles",
                        "in": "query",
                        "name": "enable_sharing",
                        "type": "boolean"
                    },
                    {
                        "description": "Number of results to return",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by URL slug",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter by search query",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "Filter articles updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters articles updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters articles updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters articles updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Article"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of Knowledge Base Articles",
                "tags": [
                    "Articles"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_articles",
                "parameters": [
                    {
                        "description": "Article object that needs to be added to the store",
                        "in": "body",
                        "name": "article",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "Used to associate article with a company",
                                    "type": "integer"
                                },
                                "content": {
                                    "description": "Article content",
                                    "type": "string"
                                },
                                "enable_sharing": {
                                    "description": "When true, the article has a public URL for non-authenticated users to view",
                                    "type": "boolean"
                                },
                                "folder_id": {
                                    "description": "Used to associate article with a folder",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Article name",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Article created successfully",
                        "schema": {
                            "$ref": "#/definitions/Article"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a Knowledge Base Article",
                "tags": [
                    "Articles"
                ]
            }
        },
        "/articles/{id}": {
            "delete": {
                "operationId": "delete_articles_id",
                "parameters": [
                    {
                        "description": "ID of the requested article",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Article deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete a Knowledge Base Article",
                "tags": [
                    "Articles"
                ]
            },
            "get": {
                "operationId": "get_articles_id",
                "parameters": [
                    {
                        "description": "ID of the requested article",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Article"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a Knowledge Base Article",
                "tags": [
                    "Articles"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_articles_id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Article object that needs to be updated",
                        "in": "body",
                        "name": "article",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "Used to associate article with a company",
                                    "type": "integer"
                                },
                                "content": {
                                    "description": "Article content",
                                    "type": "string"
                                },
                                "enable_sharing": {
                                    "description": "When true, the article has a public URL for non-authenticated users to view",
                                    "type": "boolean"
                                },
                                "folder_id": {
                                    "description": "Used to associate article with a folder",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Article name",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Article"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a Knowledge Base Article",
                "tags": [
                    "Articles"
                ]
            }
        },
        "/articles/{id}/archive": {
            "put": {
                "operationId": "put_articles_id_archive",
                "parameters": [
                    {
                        "description": "ID of the requested article",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article archived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "summary": "Archive a Knowledge Base Article",
                "tags": [
                    "Articles"
                ]
            }
        },
        "/articles/{id}/unarchive": {
            "put": {
                "operationId": "put_articles_id_unarchive",
                "parameters": [
                    {
                        "description": "ID of the requested article",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article unarchived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "summary": "Unarchive a Knowledge Base Article",
                "tags": [
                    "Articles"
                ]
            }
        },
        "/asset_layouts": {
            "get": {
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "description": "Retrieve a list of available Asset Layouts.",
                "operationId": "get_asset_layouts",
                "parameters": [
                    {
                        "description": "Filter by the name of the Asset Layout",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Get the current page of results",
                        "in": "query",
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "description": "Filter by URL slug",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter asset layouts updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters asset layouts updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters asset layouts updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters asset layouts updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Asset Layouts",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of Asset Layouts",
                "tags": [
                    "Asset Layouts"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new Asset Layout with the specified properties.",
                "operationId": "post_asset_layouts",
                "parameters": [
                    {
                        "description": "Asset layout object that needs to be added to the store",
                        "in": "body",
                        "name": "asset_layout",
                        "required": true,
                        "schema": {
                            "example": {
                                "asset_layout": {
                                    "color": "icon-color-here E.g. --> #FFFFF",
                                    "fields": [
                                        {
                                            "field_type": "type-of-field-here E.g. Text, RichText, Number",
                                            "label": "Name-of-the-field-here",
                                            "position": 1,
                                            "required": true,
                                            "show_in_list": true
                                        },
                                        {
                                            "field_type": "Another-type-of-field E.g. Text, RichText, Number",
                                            "label": "Another-field-name-here",
                                            "position": 2,
                                            "required": false,
                                            "show_in_list": false
                                        }
                                    ],
                                    "icon": "icon-emblem-here E.g. --> fas fa-home",
                                    "icon_color": "icon-background-color-here E.g. --> #FFFFF",
                                    "include_comments": true,
                                    "include_files": true,
                                    "include_passwords": true,
                                    "include_photos": true,
                                    "name": "Asset-Layout-Name-Here"
                                }
                            },
                            "properties": {
                                "color": {
                                    "description": "Hex code for the background color",
                                    "type": "string"
                                },
                                "fields": {
                                    "description": "An array of fields for the Asset Layout",
                                    "items": {
                                        "properties": {
                                            "field_type": {
                                                "type": "string"
                                            },
                                            "label": {
                                                "type": "string"
                                            },
                                            "position": {
                                                "type": "integer"
                                            },
                                            "required": {
                                                "type": "boolean"
                                            },
                                            "show_in_list": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "icon": {
                                    "description": "Icon class name",
                                    "type": "string"
                                },
                                "icon_color": {
                                    "description": "Hex code for the icon color",
                                    "type": "string"
                                },
                                "include_comments": {
                                    "description": "If true, include comments in the Asset Layout",
                                    "type": "boolean"
                                },
                                "include_files": {
                                    "description": "If true, include files in the Asset Layout",
                                    "type": "boolean"
                                },
                                "include_passwords": {
                                    "description": "If true, include passwords in the Asset Layout",
                                    "type": "boolean"
                                },
                                "include_photos": {
                                    "description": "If true, include photos in the Asset Layout",
                                    "type": "boolean"
                                },
                                "name": {
                                    "description": "Name of the Asset Layout",
                                    "type": "string"
                                },
                                "password_types": {
                                    "description": "List of password types, separated with new line characters",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created an Asset Layout",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create an Asset Layout",
                "tags": [
                    "Asset Layouts"
                ]
            }
        },
        "/asset_layouts/{id}": {
            "get": {
                "operationId": "get_asset_layouts_id",
                "parameters": [
                    {
                        "description": "ID of the requested Asset Layout",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get an Asset Layout",
                "tags": [
                    "Asset Layouts"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_asset_layouts_id",
                "parameters": [
                    {
                        "description": "ID of the Asset Layout to be updated",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Asset layout object that needs to be updated in the store",
                        "in": "body",
                        "name": "asset_layout",
                        "required": true,
                        "schema": {
                            "properties": {
                                "active": {
                                    "description": "If true, the Asset Layout is active",
                                    "type": "boolean"
                                },
                                "color": {
                                    "description": "Hex code for the background color",
                                    "type": "string"
                                },
                                "fields": {
                                    "description": "An array of field names for the Asset Layout",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "icon": {
                                    "description": "Icon class name",
                                    "type": "string"
                                },
                                "icon_color": {
                                    "description": "Hex code for the icon color",
                                    "type": "string"
                                },
                                "include_comments": {
                                    "description": "If true, include comments in the Asset Layout",
                                    "type": "boolean"
                                },
                                "include_files": {
                                    "description": "If true, include files in the Asset Layout",
                                    "type": "boolean"
                                },
                                "include_passwords": {
                                    "description": "If true, include passwords in the Asset Layout",
                                    "type": "boolean"
                                },
                                "include_photos": {
                                    "description": "If true, include photos in the Asset Layout",
                                    "type": "boolean"
                                },
                                "name": {
                                    "description": "Name of the Asset Layout",
                                    "type": "string"
                                },
                                "password_types": {
                                    "description": "List of password types, separated with new line characters",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update an Asset Layout",
                "tags": [
                    "Asset Layouts"
                ]
            }
        },
        "/asset_passwords": {
            "get": {
                "operationId": "get_asset_passwords",
                "parameters": [
                    {
                        "description": "Filter by name of password",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter by company_id",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Set to true to display only archived assets",
                        "in": "query",
                        "name": "archived",
                        "type": "boolean"
                    },
                    {
                        "description": "Get current page of results",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return",
                        "format": "int32",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by url slug",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter by search query",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "Filter asset passwords updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters asset passwords updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters asset passwords updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters asset passwords updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Asset_Password"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "summary": "Get a list of Passwords",
                "tags": [
                    "Asset Passwords"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_asset_passwords",
                "parameters": [
                    {
                        "description": "Asset Password data",
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "properties": {
                                "asset_password": {
                                    "properties": {
                                        "company_id": {
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "in_portal": {
                                            "type": "boolean"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "otp_secret": {
                                            "type": "string"
                                        },
                                        "password": {
                                            "type": "string"
                                        },
                                        "password_folder_id": {
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "password_type": {
                                            "type": "string"
                                        },
                                        "passwordable_id": {
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "passwordable_type": {
                                            "type": "string"
                                        },
                                        "url": {
                                            "type": "string"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a Password",
                "tags": [
                    "Asset Passwords"
                ]
            }
        },
        "/asset_passwords/{id}": {
            "delete": {
                "operationId": "delete_asset_passwords_id",
                "parameters": [
                    {
                        "description": "ID of the requested Password",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete a Password",
                "tags": [
                    "Asset Passwords"
                ]
            },
            "get": {
                "operationId": "get_asset_passwords_id",
                "parameters": [
                    {
                        "description": "ID of the requested Password",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a Password",
                "tags": [
                    "Asset Passwords"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_asset_passwords_id",
                "parameters": [
                    {
                        "description": "ID of the requested Password",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Asset Password data",
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "properties": {
                                "asset_password": {
                                    "properties": {
                                        "company_id": {
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "in_portal": {
                                            "type": "boolean"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "otp_secret": {
                                            "type": "string"
                                        },
                                        "password": {
                                            "type": "string"
                                        },
                                        "password_folder_id": {
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "password_type": {
                                            "type": "string"
                                        },
                                        "passwordable_id": {
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "passwordable_type": {
                                            "type": "string"
                                        },
                                        "url": {
                                            "type": "string"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a Password",
                "tags": [
                    "Asset Passwords"
                ]
            }
        },
        "/asset_passwords/{id}/archive": {
            "put": {
                "operationId": "put_asset_passwords_id_archive",
                "parameters": [
                    {
                        "description": "ID of the requested Password",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "summary": "Archive a Password",
                "tags": [
                    "Asset Passwords"
                ]
            }
        },
        "/asset_passwords/{id}/unarchive": {
            "put": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "",
                "operationId": "put_asset_passwords_id_unarchive",
                "parameters": [
                    {
                        "description": "id of the requested Password",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "summary": "Unarchive a Password",
                "tags": [
                    "Asset Passwords"
                ]
            }
        },
        "/assets": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "Retrieve a list of assets based on the provided filters and pagination settings",
                "operationId": "get_assets",
                "parameters": [
                    {
                        "description": "Filter assets by the parent company's ID",
                        "in": "query",
                        "name": "company_id",
                        "type": "number"
                    },
                    {
                        "description": "Filter assets by their ID",
                        "in": "query",
                        "name": "id",
                        "type": "number"
                    },
                    {
                        "description": "Filter assets by their name",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter assets by their primary serial number",
                        "in": "query",
                        "name": "primary_serial",
                        "type": "string"
                    },
                    {
                        "description": "Filter assets by their associated asset layout's ID",
                        "in": "query",
                        "name": "asset_layout_id",
                        "type": "number"
                    },
                    {
                        "description": "Specify the page number of results to return",
                        "in": "query",
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "description": "Set to true to display only archived assets",
                        "in": "query",
                        "name": "archived",
                        "type": "boolean"
                    },
                    {
                        "description": "Limit the number of assets returned per page",
                        "in": "query",
                        "name": "page_size",
                        "type": "number"
                    },
                    {
                        "description": "Filter assets by their URL slug",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter assets using a search query",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "Filter assets updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters assets updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters assets updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters assets updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of assets successfully retrieved",
                        "schema": {
                            "properties": {
                                "assets": {
                                    "items": {
                                        "$ref": "#/definitions/Asset"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, authentication required"
                    },
                    "404": {
                        "description": "The specified resource(s) could not be found"
                    }
                },
                "summary": "Retrieve a list of assets",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/cards/jump": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "The `/cards/jump` endpoint provides an easy way to create links from external integrations to Hudu. Below are examples of how to jump from a Syncro contact and a Watchman Monitoring computer to the corresponding asset in Hudu:\n- Syncro example:\n  ```\n  https://[MY_URL_HERE]/api/v1/cards/jump?integration_id=XXXX&integration_slug=syncro&integration_type=contact\n  ```\n\n- Watchman Monitoring example (using identifier instead of ID):\n  ```\n  https://[MY_URL_HERE]/api/v1/cards/jump?integration_identifier=XXXX&integration_slug=watchman&integration_type=computer\n  ```\n",
                "operationId": "get_cards_jump",
                "parameters": [
                    {
                        "description": "Type of card. Contact support@usehudu.com for a list of types for specific integrations.",
                        "in": "query",
                        "name": "integration_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the external integration.",
                        "in": "query",
                        "name": "integration_slug",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the entity in the external integration.",
                        "in": "query",
                        "name": "integration_id",
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the entity in the external integration (if integration_id is not set).",
                        "in": "query",
                        "name": "integration_identifier",
                        "type": "string"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Jump to an asset with integration details without API key authentication, only requiring authentication at the time of jump.",
                "tags": [
                    "Cards"
                ]
            }
        },
        "/cards/lookup": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "Searches for cards associated with the specified external integration details. Returns a 200 status code if successful.",
                "operationId": "get_cards_lookup",
                "parameters": [
                    {
                        "description": "Identifier of the external integration",
                        "in": "query",
                        "name": "integration_slug",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID in the external integration. Must be present unless integration_identifier is set\n",
                        "in": "query",
                        "name": "integration_id",
                        "type": "string"
                    },
                    {
                        "description": "Identifier in the external integration (used if integration_id is not set)",
                        "in": "query",
                        "name": "integration_identifier",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cards found successfully",
                        "schema": {
                            "properties": {
                                "integrator_cards": {
                                    "items": {
                                        "$ref": "#/definitions/Integrator_Card"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Lookup cards with external integration details",
                "tags": [
                    "Cards"
                ]
            }
        },
        "/companies": {
            "get": {
                "description": "Retrieve a list of companies with optional filtering and pagination parameters.",
                "operationId": "get_companies",
                "parameters": [
                    {
                        "description": "Retrieve the specified page of results",
                        "in": "query",
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "description": "Specify the number of results to return per page",
                        "in": "query",
                        "name": "page_size",
                        "type": "number"
                    },
                    {
                        "description": "Filter companies by name",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by phone number",
                        "in": "query",
                        "name": "phone_number",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by website",
                        "in": "query",
                        "name": "website",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by city",
                        "in": "query",
                        "name": "city",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by id_number",
                        "in": "query",
                        "name": "id_number",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by state",
                        "in": "query",
                        "name": "state",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by URL slug",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by a search query",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies by id/identifier in PSA/RMM/outside integration",
                        "in": "query",
                        "name": "id_in_integration",
                        "type": "string"
                    },
                    {
                        "description": "Filter companies updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of companies",
                        "schema": {
                            "properties": {
                                "assets": {
                                    "items": {
                                        "$ref": "#/definitions/Company"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve a list of companies",
                "tags": [
                    "Companies"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new company with the provided information.",
                "operationId": "post_companies",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "address_line_1": {
                                    "description": "The first line of the company's address",
                                    "type": "string"
                                },
                                "address_line_2": {
                                    "description": "The second line of the company's address",
                                    "type": "string"
                                },
                                "city": {
                                    "description": "The city where the company is located",
                                    "type": "string"
                                },
                                "company_type": {
                                    "description": "The type of the company",
                                    "type": "string"
                                },
                                "country_name": {
                                    "description": "The country where the company is located",
                                    "type": "string"
                                },
                                "fax_number": {
                                    "description": "The company's fax number",
                                    "type": "string"
                                },
                                "id_number": {
                                    "description": "The company's ID number",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the company",
                                    "type": "string"
                                },
                                "nickname": {
                                    "description": "The nickname of the company",
                                    "type": "string"
                                },
                                "notes": {
                                    "description": "Additional notes about the company",
                                    "type": "string"
                                },
                                "parent_company_id": {
                                    "description": "The parent company's ID, if applicable",
                                    "type": "number"
                                },
                                "phone_number": {
                                    "description": "The company's phone number",
                                    "type": "string"
                                },
                                "state": {
                                    "description": "The state where the company is located",
                                    "type": "string"
                                },
                                "website": {
                                    "description": "The company's website",
                                    "type": "string"
                                },
                                "zip": {
                                    "description": "The zip code of the company's location",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Company created successfully",
                        "schema": {
                            "$ref": "#/definitions/Company"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a new company",
                "tags": [
                    "Companies"
                ]
            }
        },
        "/companies/{company_id}/assets": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "Retrieve a list of assets specific to a particular company.",
                "operationId": "get_companies_company_id_assets",
                "parameters": [
                    {
                        "description": "The identifier of the requested parent Company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The current page of results to retrieve",
                        "in": "query",
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "description": "Set to true to only show archived results",
                        "in": "query",
                        "name": "archived",
                        "type": "boolean"
                    },
                    {
                        "description": "The number of results to return per page",
                        "in": "query",
                        "name": "page_size",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of assets for the specified company",
                        "schema": {
                            "properties": {
                                "assets": {
                                    "items": {
                                        "$ref": "#/definitions/Asset"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of Assets specific to a Company",
                "tags": [
                    "Assets"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_companies_company_id_assets",
                "parameters": [
                    {
                        "description": "The identifier of the parent company for the new asset",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The asset to create",
                        "in": "body",
                        "name": "asset",
                        "required": true,
                        "schema": {
                            "properties": {
                                "asset_layout_id": {
                                    "description": "The identifier of the asset layout associated with the new asset",
                                    "type": "number"
                                },
                                "custom_fields": {
                                    "description": "An array of JSON objects with the label underscored and downcased. The label must correspond with an existing asset layout field's label.",
                                    "items": {
                                        "additionalProperties": {
                                            "type": "string"
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "name": {
                                    "description": "The name of the new asset",
                                    "type": "string"
                                },
                                "primary_mail": {
                                    "description": "The primary email associated with the new asset",
                                    "type": "string"
                                },
                                "primary_manufacturer": {
                                    "description": "The primary manufacturer of the new asset",
                                    "type": "string"
                                },
                                "primary_model": {
                                    "description": "The primary model of the new asset",
                                    "type": "string"
                                },
                                "primary_serial": {
                                    "description": "The primary serial number of the new asset",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                },
                "summary": "Create an Asset",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/companies/{company_id}/assets/{id}": {
            "delete": {
                "description": "Deletes the specified Asset. Returns a 204 status code if successful.",
                "operationId": "delete_companies_company_id_assets_id",
                "parameters": [
                    {
                        "description": "The identifier of the requested Asset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The identifier of the requested parent Company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Asset deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete an Asset",
                "tags": [
                    "Assets"
                ]
            },
            "get": {
                "description": "Retrieve a specific asset by its identifier.",
                "operationId": "get_companies_company_id_assets_id",
                "parameters": [
                    {
                        "description": "The identifier of the requested Asset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The identifier of the requested parent Company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get an Asset",
                "tags": [
                    "Assets"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update the specified asset with new information. Asset data should be sent in the body of the request in JSON format. NOTE: to update fields you must use the 'custom_fields' key. Then specify the label and value as a key pair. The label must in snake case (lowercase with underscores instead of spaces) For example: <pre>{\"asset\":{\"name\": \"new name\", \"asset_layout_id\": 3, \"primary_serial\": \"new serial\", \"custom_fields\": [{\"brand\": \"Apple\", \"model\": \"MacBook Pro\"}]}}</pre>",
                "operationId": "put_companies_company_id_assets_id",
                "parameters": [
                    {
                        "description": "The updated asset data in JSON format",
                        "in": "body",
                        "name": "asset",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    {
                        "description": "The identifier of the requested Asset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The identifier of the requested parent Company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update an Asset",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/companies/{company_id}/assets/{id}/archive": {
            "put": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "Archives the specified Asset. Returns a 200 status code if successful.",
                "operationId": "put_companies_company_id_assets_id_archive",
                "parameters": [
                    {
                        "description": "The identifier of the requested Asset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The identifier of the requested parent Company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Asset archived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "summary": "Archive an Asset",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/companies/{company_id}/assets/{id}/move_layout": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Moves an Asset to a new Layout while preserving field values. The system will:\n\n1. Match existing fields between layouts by exact label and type (case-sensitive, spaces matter)\n2. Create new fields in the target layout if they don't exist\n3. Transfer all field values to their corresponding fields in the new layout\n4. Validate that any required fields in the new layout exist in the current layout\n\nNote: Fields are matched by their label and type. If a field with the same label (case-sensitive, spaces matter) and type exists in the target layout, the asset's field value will be mapped to that existing field. If no matching field exists, a new one will be created with the same properties as the source field.",
                "operationId": "put_companies_company_id_assets_id_move_layout",
                "parameters": [
                    {
                        "description": "ID of the parent company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "ID of the asset to move",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "asset_layout_id": {
                                    "description": "ID of the new asset layout",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "asset_layout_id"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Asset successfully moved to new layout",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Asset layout not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Move asset to a different layout",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/companies/{company_id}/assets/{id}/unarchive": {
            "put": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "Unarchives the specified Asset. Returns a 200 status code if successful.",
                "operationId": "put_companies_company_id_assets_id_unarchive",
                "parameters": [
                    {
                        "description": "The identifier of the requested Asset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "The identifier of the requested parent Company",
                        "in": "path",
                        "name": "company_id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Asset unarchived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unarchival Failure"
                    }
                },
                "summary": "Unarchive an Asset",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/companies/{id}": {
            "delete": {
                "description": "Delete a company by its ID. Returns a 204 if successful.",
                "operationId": "delete_companies_id",
                "parameters": [
                    {
                        "description": "ID of the company to delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Company deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    }
                },
                "summary": "Delete a specific company",
                "tags": [
                    "Companies"
                ]
            },
            "get": {
                "description": "Fetch the details of a company by its ID.",
                "operationId": "get_companies_id",
                "parameters": [
                    {
                        "description": "ID of the requested company",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company found",
                        "schema": {
                            "$ref": "#/definitions/Company"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    }
                },
                "summary": "Retrieve a specific company",
                "tags": [
                    "Companies"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update the details of a company by its ID.",
                "operationId": "put_companies_id",
                "parameters": [
                    {
                        "description": "ID of the company to update",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "address_line_1": {
                                    "description": "The first line of the company's address",
                                    "type": "string"
                                },
                                "address_line_2": {
                                    "description": "The second line of the company's address",
                                    "type": "string"
                                },
                                "city": {
                                    "description": "The city where the company is located",
                                    "type": "string"
                                },
                                "company_type": {
                                    "description": "The type of the company",
                                    "type": "string"
                                },
                                "country_name": {
                                    "description": "The country where the company is located",
                                    "type": "string"
                                },
                                "fax_number": {
                                    "description": "The company's fax number",
                                    "type": "string"
                                },
                                "id_number": {
                                    "description": "The company's ID number",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the company",
                                    "type": "string"
                                },
                                "nickname": {
                                    "description": "The nickname of the company",
                                    "type": "string"
                                },
                                "notes": {
                                    "description": "Additional notes about the company",
                                    "type": "string"
                                },
                                "parent_company_id": {
                                    "description": "The parent company's ID, if applicable",
                                    "type": "number"
                                },
                                "phone_number": {
                                    "description": "The company's phone number",
                                    "type": "string"
                                },
                                "state": {
                                    "description": "The state where the company is located",
                                    "type": "string"
                                },
                                "website": {
                                    "description": "The company's website",
                                    "type": "string"
                                },
                                "zip": {
                                    "description": "The zip code of the company's location",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Company"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a specific company",
                "tags": [
                    "Companies"
                ]
            }
        },
        "/companies/{id}/archive": {
            "put": {
                "description": "Mark a company as archived by its ID. Archived companies are hidden from the regular list of companies but can be retrieved if necessary.",
                "operationId": "put_companies_id_archive",
                "parameters": [
                    {
                        "description": "ID of the company to archive",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company archived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    },
                    "422": {
                        "description": "Archival failure"
                    }
                },
                "summary": "Archive a specific company",
                "tags": [
                    "Companies"
                ]
            }
        },
        "/companies/{id}/unarchive": {
            "put": {
                "description": "Mark a previously archived company as unarchived by its ID. Unarchived companies are visible in the regular list of companies.",
                "operationId": "put_companies_id_unarchive",
                "parameters": [
                    {
                        "description": "ID of the company to unarchive",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company unarchived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    },
                    "422": {
                        "description": "Unarchival failure"
                    }
                },
                "summary": "Unarchive a specific company",
                "tags": [
                    "Companies"
                ]
            }
        },
        "/companies/jump": {
            "get": {
                "description": "Jump to a company that contains integration details, bypassing the need for API key authentication. Authentication is only required at the time of the jump. This is a convenient way to create links from external integrations to Hudu.",
                "operationId": "get_companies_jump",
                "parameters": [
                    {
                        "description": "Identifier of the external integration (e.g., 'cw_manage')",
                        "in": "query",
                        "name": "integration_slug",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the company in the external integration (e.g., '[ID_HERE]')",
                        "in": "query",
                        "name": "integration_id",
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the company in the external integration (used if integration_id is not set)",
                        "in": "query",
                        "name": "integration_identifier",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Jump successful. Example: `https://[MY_URL_HERE]/api/v1/companies/jump?integration_id=[ID_HERE]&integration_slug=cw_manage`"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    }
                },
                "summary": "Jump to a company with integration details",
                "tags": [
                    "Companies"
                ]
            }
        },
        "/expirations": {
            "get": {
                "description": "Retrieve a list of expirations for the account, with optional filtering and pagination.",
                "operationId": "get_expirations",
                "parameters": [
                    {
                        "description": "The current page of results to retrieve",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Filter expirations by company ID",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter expirations by expiration type (undeclared, domain, ssl_certificate, warranty, asset_field, article_expiration)\n",
                        "in": "query",
                        "name": "expiration_type",
                        "type": "string"
                    },
                    {
                        "description": "Filter logs by resource ID; must be coupled with resource_type",
                        "format": "int64",
                        "in": "query",
                        "name": "resource_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter logs by resource type (Asset, AssetPassword, Company, Article, etc.); must be coupled with resource_id\n",
                        "in": "query",
                        "name": "resource_type",
                        "type": "string"
                    },
                    {
                        "description": "The number of results to return per page",
                        "format": "int32",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of expirations",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Expiration"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve expirations for the account",
                "tags": [
                    "Expirations"
                ]
            }
        },
        "/exports": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Initiate an export of a company with specified settings and filters.",
                "operationId": "post_exports",
                "parameters": [
                    {
                        "in": "body",
                        "name": "export",
                        "required": true,
                        "schema": {
                            "properties": {
                                "export": {
                                    "properties": {
                                        "asset_layout_ids": {
                                            "description": "Array of asset layout IDs to include in the export",
                                            "items": {
                                                "format": "int64",
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        "company_id": {
                                            "description": "Specify the company to export",
                                            "format": "int64",
                                            "type": "integer"
                                        },
                                        "format": {
                                            "description": "Specify the export format: pdf, csv, or s3",
                                            "enum": [
                                                "pdf",
                                                "csv",
                                                "s3"
                                            ],
                                            "type": "string"
                                        },
                                        "include_passwords": {
                                            "description": "True or False to indicate if passwords should be included in the export",
                                            "type": "boolean"
                                        },
                                        "include_websites": {
                                            "description": "True or False to indicate if websites should be included in the export",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export initiated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Initiate an export of a company",
                "tags": [
                    "Exports"
                ]
            }
        },
        "/folders": {
            "get": {
                "operationId": "get_folders",
                "parameters": [
                    {
                        "description": "Filter folders by name",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter folders by company ID",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "When true, only returns company-specific KB articles",
                        "in": "query",
                        "name": "in_company",
                        "type": "boolean"
                    },
                    {
                        "description": "The current page of results to retrieve",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "The number of results to return per page",
                        "format": "int32",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of folders",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Folder"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve a list of folders",
                "tags": [
                    "Folders"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new folder with the provided information.",
                "operationId": "post_folders",
                "parameters": [
                    {
                        "in": "body",
                        "name": "folder",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "ID of the associated company (optional)",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "description": {
                                    "description": "Description of the folder",
                                    "type": "string"
                                },
                                "icon": {
                                    "description": "Icon for the folder",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name of the folder",
                                    "type": "string"
                                },
                                "parent_folder_id": {
                                    "description": "ID of the parent folder (optional)",
                                    "format": "int64",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Folder created successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a folder",
                "tags": [
                    "Folders"
                ]
            }
        },
        "/folders/{id}": {
            "delete": {
                "description": "Delete a folder by its ID.",
                "operationId": "delete_folders_id",
                "parameters": [
                    {
                        "description": "ID of the folder to delete",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Folder deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Folder not found"
                    }
                },
                "summary": "Delete a folder",
                "tags": [
                    "Folders"
                ]
            },
            "get": {
                "description": "Retrieve a folder by its ID.",
                "operationId": "get_folders_id",
                "parameters": [
                    {
                        "description": "ID of the requested folder",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Folder retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Folder not found"
                    }
                },
                "summary": "Retrieve a folder by ID",
                "tags": [
                    "Folders"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an existing folder with the provided information.",
                "operationId": "put_folders_id",
                "parameters": [
                    {
                        "description": "ID of the folder to update",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "in": "body",
                        "name": "folder",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "ID of the associated company (optional)",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "description": {
                                    "description": "Description of the folder",
                                    "type": "string"
                                },
                                "icon": {
                                    "description": "Icon for the folder",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name of the folder",
                                    "type": "string"
                                },
                                "parent_folder_id": {
                                    "description": "ID of the parent folder (optional)",
                                    "format": "int64",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Folder not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a folder",
                "tags": [
                    "Folders"
                ]
            }
        },
        "/ip_addresses": {
            "get": {
                "description": "Retrieve a list of all IP addresses, with optional filtering.",
                "operationId": "getIpAddresses",
                "parameters": [
                    {
                        "description": "Filter by network ID",
                        "format": "int64",
                        "in": "query",
                        "name": "network_id",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter by IP address",
                        "in": "query",
                        "name": "address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by IP address status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by FQDN",
                        "in": "query",
                        "name": "fqdn",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by asset ID",
                        "format": "int64",
                        "in": "query",
                        "name": "asset_id",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter by company ID",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter IP addresses created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "created_at",
                        "type": "string"
                    },
                    {
                        "description": "Filter IP addresses updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of IP addresses",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/IpAddress"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "summary": "Get a list of IP addresses",
                "tags": [
                    "IP Addresses"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Add a new IP address to the system.",
                "operationId": "createIpAddress",
                "parameters": [
                    {
                        "description": "IP Address object that needs to be added",
                        "in": "body",
                        "name": "ip_address",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "IP address created",
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                },
                "summary": "Create a new IP address",
                "tags": [
                    "IP Addresses"
                ]
            }
        },
        "/ip_addresses/{id}": {
            "delete": {
                "description": "Remove an IP address from the system.",
                "operationId": "deleteIpAddress",
                "parameters": [
                    {
                        "description": "IP Address ID",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "IP address deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "IP address not found"
                    }
                },
                "summary": "Delete an IP address",
                "tags": [
                    "IP Addresses"
                ]
            },
            "get": {
                "description": "Retrieve details of a specific IP address by ID.",
                "operationId": "getIpAddressById",
                "parameters": [
                    {
                        "description": "IP Address ID",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Details of an IP address",
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "IP address not found"
                    }
                },
                "summary": "Get a single IP address",
                "tags": [
                    "IP Addresses"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Modify details of an existing IP address.",
                "operationId": "updateIpAddress",
                "parameters": [
                    {
                        "description": "IP Address ID",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "IP Address object with updated data",
                        "in": "body",
                        "name": "ip_address",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "IP address updated",
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "IP address not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                },
                "summary": "Update an existing IP address",
                "tags": [
                    "IP Addresses"
                ]
            }
        },
        "/magic_dash": {
            "delete": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "  <p>You can delete a Magic Dash item by sending the same parameters you do to create a magic dash item, but with a DELETE REST request.</p>\n  <pre>\n  {\n    \"title\": \"Microsoft 365\",\n    \"company_name\": \"AcmeCorp\"\n  }\n  </pre>\n",
                "operationId": "delete_magic_dash",
                "parameters": [
                    {
                        "description": "The title attribute of the Magic Dash Item to be deleted",
                        "in": "formData",
                        "name": "title",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The company name attribute of the Magic Dash Item to be deleted",
                        "in": "formData",
                        "name": "company_name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Delete a Magic Dash Item without an ID",
                "tags": [
                    "Magic Dash"
                ]
            },
            "get": {
                "operationId": "get_magic_dash",
                "parameters": [
                    {
                        "description": "Filter by title",
                        "in": "query",
                        "name": "title",
                        "type": "string"
                    },
                    {
                        "description": "Filter by company ID",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Retrieve the current page of results",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Set the number of results to return per page",
                        "format": "int32",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of Magic Dash Items",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/MagicDash"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve a list of Magic Dash Items",
                "tags": [
                    "Magic Dash"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_magic_dash",
                "parameters": [
                    {
                        "in": "body",
                        "name": "magic_dash_item",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_name": {
                                    "description": "The company name attribute used to match an existing company",
                                    "type": "string"
                                },
                                "content": {
                                    "description": "HTML content (tables, images, videos, etc.) to be displayed in the Magic Dash Item",
                                    "type": "string"
                                },
                                "content_link": {
                                    "description": "A link to an external website associated with the Magic Dash Item's content",
                                    "type": "string"
                                },
                                "icon": {
                                    "description": "A FontAwesome icon for the header of the Magic Dash Item (e.g., fas fa-circle)",
                                    "type": "string"
                                },
                                "image_url": {
                                    "description": "A URL for an image to be used in the header of the Magic Dash Item",
                                    "type": "string"
                                },
                                "message": {
                                    "description": "The primary content to be displayed on the Magic Dash Item",
                                    "type": "string"
                                },
                                "shade": {
                                    "description": "An optional color for the Magic Dash Item to represent different contextual states (e.g., success, danger)",
                                    "type": "string"
                                },
                                "title": {
                                    "description": "The title attribute, used for matching existing Magic Dash Items with the same title and company_name",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Magic Dash Item created or updated successfully",
                        "schema": {
                            "$ref": "#/definitions/MagicDash"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create or update a Magic Dash Item",
                "tags": [
                    "Magic Dash"
                ]
            }
        },
        "/magic_dash/{id}": {
            "delete": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "description": "This endpoint allows you to delete a Magic Dash item by providing its unique ID.",
                "operationId": "deleteMagicDashItemById",
                "parameters": [
                    {
                        "description": "The unique ID of the Magic Dash item to be deleted",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Magic Dash item not found"
                    },
                    "422": {
                        "description": "Unable to process the request"
                    }
                },
                "summary": "Delete a Magic Dash item with the specified ID",
                "tags": [
                    "Magic Dash"
                ]
            }
        },
        "/matchers": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "Retrieve a list of matchers for a specific integration based on provided filters.",
                "operationId": "getMatchers",
                "parameters": [
                    {
                        "description": "The ID of the integration, which can be found in the URL when editing an integration.",
                        "in": "query",
                        "name": "integration_id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Filter by whether the company has already been matched.",
                        "in": "query",
                        "name": "matched",
                        "type": "boolean"
                    },
                    {
                        "description": "Filter by the ID of the record in the integration (used if the integration's ID is an integer).",
                        "in": "query",
                        "name": "sync_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by the identifier in the integration (used if the integration's ID is a string).",
                        "in": "query",
                        "name": "identifier",
                        "type": "string"
                    },
                    {
                        "description": "The current page of results.",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "The number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by company ID.",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of matchers",
                        "schema": {
                            "properties": {
                                "matchers": {
                                    "items": {
                                        "$ref": "#/definitions/Matcher"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "List matchers for an integration",
                "tags": [
                    "Matchers"
                ]
            }
        },
        "/matchers/{id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "description": "Delete the specified Matcher by its ID. Returns a 204 if successful.",
                "operationId": "deleteMatcherById",
                "parameters": [
                    {
                        "description": "The ID of the Matcher to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Matcher successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Matcher not found"
                    }
                },
                "summary": "Delete a Matcher",
                "tags": [
                    "Matchers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update the specified Matcher's attributes.",
                "operationId": "updateMatcherById",
                "parameters": [
                    {
                        "description": "The ID of the Matcher to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Matcher update attributes",
                        "in": "body",
                        "name": "matcher",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "The updated company ID.",
                                    "type": "integer"
                                },
                                "identifier": {
                                    "description": "The updated identifier.",
                                    "type": "string"
                                },
                                "potential_company_id": {
                                    "description": "The updated potential company ID.",
                                    "type": "integer"
                                },
                                "sync_id": {
                                    "description": "The updated sync ID.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Matcher successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Matcher"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Matcher not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a Matcher",
                "tags": [
                    "Matchers"
                ]
            }
        },
        "/networks": {
            "get": {
                "description": "Retrieve a list of all networks, with optional filtering.",
                "operationId": "getNetworks",
                "parameters": [
                    {
                        "description": "Filter by company ID",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter by network slug",
                        "in": "query",
                        "name": "slug",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by network name",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by network type",
                        "in": "query",
                        "name": "network_type",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter by network address",
                        "in": "query",
                        "name": "address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by location ID",
                        "format": "int64",
                        "in": "query",
                        "name": "location_id",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter networks created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "created_at",
                        "type": "string"
                    },
                    {
                        "description": "Filter networks updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of networks",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Network"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "summary": "Get a list of networks",
                "tags": [
                    "Networks"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Add a new network to the system.",
                "operationId": "createNetwork",
                "parameters": [
                    {
                        "description": "Network object that needs to be added",
                        "in": "body",
                        "name": "network",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Network created",
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                },
                "summary": "Create a new network",
                "tags": [
                    "Networks"
                ]
            }
        },
        "/networks/{id}": {
            "delete": {
                "description": "Remove a network from the system.",
                "operationId": "deleteNetwork",
                "parameters": [
                    {
                        "description": "Network ID",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Network successfully deleted",
                        "schema": {
                            "properties": {
                                "message": {
                                    "example": "Network successfully deleted.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Network not found"
                    }
                },
                "summary": "Delete a network",
                "tags": [
                    "Networks"
                ]
            },
            "get": {
                "description": "Retrieve details of a specific network by ID.",
                "operationId": "getNetworkById",
                "parameters": [
                    {
                        "description": "Network ID",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Details of a network",
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Network not found"
                    }
                },
                "summary": "Get a single network",
                "tags": [
                    "Networks"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Modify details of an existing network.",
                "operationId": "updateNetwork",
                "parameters": [
                    {
                        "description": "Network ID",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Network object with updated data",
                        "in": "body",
                        "name": "network",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Network updated",
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Network not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                },
                "summary": "Update an existing network",
                "tags": [
                    "Networks"
                ]
            }
        },
        "/password_folders": {
            "get": {
                "operationId": "get_password_folders",
                "parameters": [
                    {
                        "description": "Filter folders by name",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter folders by company ID",
                        "format": "int64",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by search query",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "The current page of results to retrieve",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "The number of results to return per page",
                        "format": "int32",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of password folders",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Password_Folder"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve a list of password folders",
                "tags": [
                    "Password Folders"
                ]
            }
        },
        "/password_folders/{id}": {
            "get": {
                "description": "Retrieve a password folder by its ID.",
                "operationId": "get_password_folders_id",
                "parameters": [
                    {
                        "description": "ID of the requested password folder",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Password Folder retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Password_Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Password Folder not found"
                    }
                },
                "summary": "Retrieve a password folder by ID",
                "tags": [
                    "Password Folders"
                ]
            }
        },
        "/procedure_tasks": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "Retrieve a list of procedure tasks filtered by procedure ID, name, or company ID.",
                "operationId": "getProcedureTasks",
                "parameters": [
                    {
                        "description": "Filter by the procedure ID.",
                        "in": "query",
                        "name": "procedure_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by the name of the task.",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter by the company ID.",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of procedure tasks",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ProcedureTask"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "summary": "Get a list of Procedure Tasks",
                "tags": [
                    "Procedure Tasks"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new task with specified attributes.",
                "operationId": "createProcedureTask",
                "parameters": [
                    {
                        "description": "Procedure Task object to be created",
                        "in": "body",
                        "name": "procedure_task",
                        "required": true,
                        "schema": {
                            "properties": {
                                "assigned_users": {
                                    "description": "An array of user IDs assigned to the task.",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                },
                                "description": {
                                    "description": "A detailed description of the task.",
                                    "type": "string"
                                },
                                "due_date": {
                                    "description": "The due date for the task.",
                                    "format": "date",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the task.",
                                    "type": "string"
                                },
                                "position": {
                                    "description": "The position of the task in the procedure.",
                                    "type": "integer"
                                },
                                "priority": {
                                    "description": "The priority level of the task.",
                                    "enum": [
                                        "unsure",
                                        "low",
                                        "normal",
                                        "high",
                                        "urgent"
                                    ],
                                    "type": "string"
                                },
                                "procedure_id": {
                                    "description": "The ID of the procedure this task belongs to.",
                                    "type": "integer"
                                },
                                "user_id": {
                                    "description": "The ID of the user assigned to the task.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Procedure Task created successfully",
                        "schema": {
                            "$ref": "#/definitions/ProcedureTask"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Create a new Procedure Task",
                "tags": [
                    "Procedure Tasks"
                ]
            }
        },
        "/procedure_tasks/{id}": {
            "delete": {
                "description": "Remove a procedure task by its ID.",
                "operationId": "deleteProcedureTask",
                "parameters": [
                    {
                        "description": "The ID of the procedure task to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Procedure Task successfully deleted",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Procedure Task not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Delete a Procedure Task",
                "tags": [
                    "Procedure Tasks"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "Retrieve a specific procedure task by its ID.",
                "operationId": "getProcedureTaskById",
                "parameters": [
                    {
                        "description": "The ID of the procedure task to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The requested procedure task",
                        "schema": {
                            "$ref": "#/definitions/ProcedureTask"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure task not found"
                    }
                },
                "summary": "Get a Procedure Task by ID",
                "tags": [
                    "Procedure Tasks"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an existing task with specified attributes.",
                "operationId": "updateProcedureTask",
                "parameters": [
                    {
                        "description": "The ID of the procedure task to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Procedure Task object with updated attributes",
                        "in": "body",
                        "name": "procedure_task",
                        "required": true,
                        "schema": {
                            "properties": {
                                "assigned_users": {
                                    "description": "An array of user IDs assigned to the task.",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                },
                                "completed": {
                                    "description": "When true, marks the task as completed.",
                                    "type": "boolean"
                                },
                                "description": {
                                    "description": "A detailed description of the task.",
                                    "type": "string"
                                },
                                "due_date": {
                                    "description": "The due date for the task.",
                                    "format": "date",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the task.",
                                    "type": "string"
                                },
                                "position": {
                                    "description": "The position of the task in the procedure.",
                                    "type": "integer"
                                },
                                "priority": {
                                    "description": "The priority level of the task.",
                                    "enum": [
                                        "unsure",
                                        "low",
                                        "normal",
                                        "high",
                                        "urgent"
                                    ],
                                    "type": "string"
                                },
                                "procedure_id": {
                                    "description": "The ID of the procedure this task belongs to.",
                                    "type": "integer"
                                },
                                "user_id": {
                                    "description": "The ID of the user assigned to the task.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Procedure Task updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ProcedureTask"
                        }
                    },
                    "404": {
                        "description": "Procedure Task not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Update a Procedure Task",
                "tags": [
                    "Procedure Tasks"
                ]
            }
        },
        "/procedures": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "Retrieve a list of procedures filtered by the provided parameters.",
                "operationId": "getProcedures",
                "parameters": [
                    {
                        "description": "Filter by the name of the procedure.",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Filter by the associated company ID.",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "The current page of results.",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "The number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by the URL slug of the procedure.",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter for global templates. 'true' for global templates, 'false' for company-specific procedures",
                        "enum": [
                            "true",
                            "false"
                        ],
                        "in": "query",
                        "name": "global_template",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter for company-specific templates. Provide the company ID to filter templates for that company",
                        "in": "query",
                        "name": "company_template",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter for child procedures of a specific parent procedure",
                        "in": "query",
                        "name": "parent_procedure_id",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of procedures",
                        "schema": {
                            "properties": {
                                "procedures": {
                                    "items": {
                                        "$ref": "#/definitions/Procedure"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of Procedures (Processes)",
                "tags": [
                    "Procedures"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new procedure without any tasks",
                "operationId": "createProcedure",
                "parameters": [
                    {
                        "description": "Procedure attributes",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "The ID of the company this procedure should be transferred to. Set to null to make this a global template.",
                                    "format": "int64",
                                    "nullable": true,
                                    "type": "integer"
                                },
                                "company_template": {
                                    "description": "When true, sets both template and remove_completion_ability to true. When false, sets both to false.",
                                    "type": "boolean"
                                },
                                "description": {
                                    "description": "Description of the procedure",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name of the procedure",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Create a new Procedure (Process)",
                "tags": [
                    "Procedures"
                ]
            }
        },
        "/procedures/{id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "description": "Remove a procedure by its ID.",
                "operationId": "deleteProcedure",
                "parameters": [
                    {
                        "description": "The ID of the procedure to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Procedure successfully deleted",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Delete a Procedure",
                "tags": [
                    "Procedures"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "Retrieve a procedure by its ID.",
                "operationId": "getProcedureById",
                "parameters": [
                    {
                        "description": "The ID of the requested procedure.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The requested procedure",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure not found"
                    }
                },
                "summary": "Get a Procedure (Process)",
                "tags": [
                    "Procedures"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Edit the name, description, and template status of an existing procedure.",
                "operationId": "updateProcedure",
                "parameters": [
                    {
                        "description": "The ID of the procedure to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "archived": {
                                    "description": "When true, archives the procedure by setting discarded_at. When false, unarchives the procedure by clearing discarded_at.",
                                    "type": "boolean"
                                },
                                "company_id": {
                                    "description": "The ID of the company this procedure should be transferred to. Set to null to make this a global template that's available to all companies.",
                                    "format": "int64",
                                    "nullable": true,
                                    "type": "integer"
                                },
                                "company_template": {
                                    "description": "When true, sets both template and remove_completion_ability to true. When false, sets both to false.",
                                    "type": "boolean"
                                },
                                "description": {
                                    "description": "The new description for the procedure.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The new name for the procedure.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Procedure successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Update an existing Procedure",
                "tags": [
                    "Procedures"
                ]
            }
        },
        "/procedures/{id}/create_from_template": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new procedure instance from an existing template. If company_id is not provided, it creates a global template; otherwise, it creates a company-specific template.",
                "operationId": "createProcedureFromTemplate",
                "parameters": [
                    {
                        "description": "The ID of the template procedure to duplicate.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The ID of the company for the new procedure. If not provided, a global template will be created.",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "The new name for the procedure.",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "The new description for the procedure.",
                        "in": "query",
                        "name": "description",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Procedure successfully created from template",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Template not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Create a Procedure from Template",
                "tags": [
                    "Procedures"
                ]
            }
        },
        "/procedures/{id}/duplicate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new procedure by duplicating an existing one, with optional modifications.",
                "operationId": "duplicateProcedure",
                "parameters": [
                    {
                        "description": "The ID of the procedure to duplicate.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The ID of the company for the new duplicated procedure.",
                        "in": "query",
                        "name": "company_id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The new name for the duplicated procedure (optional).",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "The new description for the duplicated procedure (optional).",
                        "in": "query",
                        "name": "description",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Procedure successfully duplicated",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Original procedure not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Duplicate an existing Procedure",
                "tags": [
                    "Procedures"
                ]
            }
        },
        "/procedures/{id}/kickoff": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Start a process from a company process. Optionally, attach the process to an asset by providing an asset ID, or change the process name by passing a new name.\n",
                "operationId": "kickoffProcedureById",
                "parameters": [
                    {
                        "description": "The ID of the requested procedure.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The ID of the asset to attach the process to (optional).",
                        "in": "query",
                        "name": "asset_id",
                        "type": "integer"
                    },
                    {
                        "description": "The new name for the procedure (optional).",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "procedure": {
                                        "properties": {
                                            "asset_id": {
                                                "example": 707,
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Procedure Task successfully deleted",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Procedure Task not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Kickoff a Procedure (Process)",
                "tags": [
                    "Procedures"
                ]
            }
        },
        "/public_photos": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "Retrieve a list of public photos with pagination options.",
                "operationId": "getPublicPhotos",
                "parameters": [
                    {
                        "description": "The current page of results.",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "The number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of public photos",
                        "schema": {
                            "properties": {
                                "public_photos": {
                                    "items": {
                                        "$ref": "#/definitions/PublicPhoto"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of public photos",
                "tags": [
                    "Public Photos"
                ]
            },
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "description": "Upload a public photo and associate it with a specific record type and ID. This will not upload the photo to the photos module or sidebar of the associated record (Upcoming Feature). This endpoint exists to add photos to articles and asset notes.",
                "operationId": "createPublicPhoto",
                "parameters": [
                    {
                        "description": "The photo file to be uploaded (must be an image).",
                        "in": "formData",
                        "name": "photo",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "description": "The type of record the photo will be associated with (e.g., Article).",
                        "in": "formData",
                        "name": "record_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the record the photo will be associated with.",
                        "in": "formData",
                        "name": "record_id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Public photo successfully created",
                        "schema": {
                            "$ref": "#/definitions/PublicPhoto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a public photo",
                "tags": [
                    "Public Photos"
                ]
            }
        },
        "/public_photos/{id}": {
            "put": {
                "consumes": [
                    "multipart/form-data"
                ],
                "description": "Update the associated record type and ID for a specific public photo.",
                "operationId": "updatePublicPhoto",
                "parameters": [
                    {
                        "description": "The ID of the public photo to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The updated type of record the photo is associated with (e.g., Article).",
                        "in": "formData",
                        "name": "record_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The updated ID of the record the photo is associated with.",
                        "in": "formData",
                        "name": "record_id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Public photo successfully updated",
                        "schema": {
                            "$ref": "#/definitions/PublicPhoto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a public photo",
                "tags": [
                    "Public Photos"
                ]
            }
        },
        "/rack_storage_items": {
            "get": {
                "operationId": "get_rack_storage_items",
                "parameters": [
                    {
                        "description": "Filter by Rack Storage Role ID",
                        "in": "query",
                        "name": "rack_storage_role_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by Asset ID",
                        "in": "query",
                        "name": "asset_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by Start Unit",
                        "in": "query",
                        "name": "start_unit",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by End Unit",
                        "in": "query",
                        "name": "end_unit",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by Status",
                        "in": "query",
                        "name": "status",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by Side. Front or Rear",
                        "in": "query",
                        "name": "side",
                        "type": "string"
                    },
                    {
                        "description": "Filter rack storage items created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "created_at",
                        "type": "string"
                    },
                    {
                        "description": "Filter rack storage items updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RackStorageItem"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of Rack Storage Items",
                "tags": [
                    "Rack Storage Items"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_rack_storage_items",
                "parameters": [
                    {
                        "description": "Rack Storage Item object that needs to be added to the store",
                        "in": "body",
                        "name": "rack_storage_item",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Rack Storage Item created successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a Rack Storage Item",
                "tags": [
                    "Rack Storage Items"
                ]
            }
        },
        "/rack_storage_items/{id}": {
            "delete": {
                "operationId": "delete_rack_storage_items_id",
                "parameters": [
                    {
                        "description": "ID of the Rack Storage Item that needs to be deleted",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rack Storage Item deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete a Rack Storage Item",
                "tags": [
                    "Rack Storage Items"
                ]
            },
            "get": {
                "operationId": "get_rack_storage_items_id",
                "parameters": [
                    {
                        "description": "ID of the requested Rack Storage Item",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a Rack Storage Item",
                "tags": [
                    "Rack Storage Items"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_rack_storage_items_id",
                "parameters": [
                    {
                        "description": "ID of the Rack Storage Item that needs to be updated",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Rack Storage Item object that needs to be updated",
                        "in": "body",
                        "name": "rack_storage_item",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rack Storage Item updated successfully",
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a Rack Storage Item",
                "tags": [
                    "Rack Storage Items"
                ]
            }
        },
        "/rack_storages": {
            "get": {
                "operationId": "get_rack_storages",
                "parameters": [
                    {
                        "description": "Filter by company id",
                        "in": "query",
                        "name": "company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by location id",
                        "in": "query",
                        "name": "location_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by rack height",
                        "in": "query",
                        "name": "height",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by minimum rack width",
                        "in": "query",
                        "name": "min_width",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by maximum rack width",
                        "in": "query",
                        "name": "max_width",
                        "type": "integer"
                    },
                    {
                        "description": "Filter rack storages created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "created_at",
                        "type": "string"
                    },
                    {
                        "description": "Filter rack storages updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RackStorage"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of Rack Storages",
                "tags": [
                    "Rack Storages"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_rack_storages",
                "parameters": [
                    {
                        "description": "Rack Storage object that needs to be added to the store",
                        "in": "body",
                        "name": "rack_storage",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Rack Storage created successfully",
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a new Rack Storage",
                "tags": [
                    "Rack Storages"
                ]
            }
        },
        "/rack_storages/{id}": {
            "delete": {
                "operationId": "delete_rack_storages_id",
                "parameters": [
                    {
                        "description": "ID of the requested rack storage",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rack Storage deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete a Rack Storage",
                "tags": [
                    "Rack Storages"
                ]
            },
            "get": {
                "operationId": "get_rack_storages_id",
                "parameters": [
                    {
                        "description": "ID of the requested rack storage",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a Rack Storage",
                "tags": [
                    "Rack Storages"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_rack_storages_id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Rack Storage object that needs to be updated",
                        "in": "body",
                        "name": "rack_storage",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rack Storage updated successfully",
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a Rack Storage",
                "tags": [
                    "Rack Storages"
                ]
            }
        },
        "/relations": {
            "get": {
                "description": "Retrieve a list of relations with filtering options.",
                "operationId": "get_relations",
                "parameters": [
                    {
                        "description": "Get the current page of results",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of relations",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Relation"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of all relations",
                "tags": [
                    "Relations"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new relation between two entities.",
                "operationId": "post_relations",
                "parameters": [
                    {
                        "description": "Relation to create",
                        "in": "body",
                        "name": "relation",
                        "required": true,
                        "schema": {
                            "properties": {
                                "description": {
                                    "description": "Provide a description for the relation to explain the relationship between the two entities",
                                    "type": "string"
                                },
                                "fromable_id": {
                                    "description": "The ID of the origin entity in the relation",
                                    "type": "integer"
                                },
                                "fromable_type": {
                                    "description": "The type of the origin entity in the relation (Asset, Website, Procedure, AssetPassword, Company, Article)",
                                    "type": "string"
                                },
                                "is_inverse": {
                                    "description": "When a relation is created, it will also create another relation that is the inverse. When this is true, this relation is the inverse.",
                                    "type": "boolean"
                                },
                                "toable_id": {
                                    "description": "The ID of the destination entity in the relation",
                                    "type": "integer"
                                },
                                "toable_type": {
                                    "description": "The type of the destination entity in the relation (Asset, Website, Procedure, AssetPassword, Company, Article)",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relation created successfully",
                        "schema": {
                            "$ref": "#/definitions/Relation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a Relation",
                "tags": [
                    "Relations"
                ]
            }
        },
        "/relations/{id}": {
            "delete": {
                "description": "Remove a relation between two entities by its ID.",
                "operationId": "delete_relations_id",
                "parameters": [
                    {
                        "description": "ID of the Relation to be deleted",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Relation deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete a Relation",
                "tags": [
                    "Relations"
                ]
            }
        },
        "/s3_exports": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Initiate a s3 export. You must configure your S3-compatible credentials in the account settings page before using this endpoint.",
                "operationId": "post_s3_exports",
                "responses": {
                    "200": {
                        "description": "Export initiated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Initiate a s3 export.",
                "tags": [
                    "S3 Exports"
                ]
            }
        },
        "/uploads": {
            "get": {
                "operationId": "get_uploads",
                "responses": {
                    "200": {
                        "description": "A list of uploads",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Upload"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "summary": "Get a list of all uploads",
                "tags": [
                    "Uploads"
                ]
            },
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "operationId": "post_uploads",
                "parameters": [
                    {
                        "description": "The file to upload",
                        "in": "formData",
                        "name": "file",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "description": "ID of the record to be attached to.",
                        "in": "formData",
                        "name": "upload[uploadable_id]",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Type of record to be attached to. (Asset, Website, Procedure, AssetPassword, Company, Article)",
                        "in": "formData",
                        "name": "upload[uploadable_type]",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully uploaded",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "Uploads"
                ]
            }
        },
        "/uploads/{id}": {
            "delete": {
                "operationId": "delete_uploads_id",
                "parameters": [
                    {
                        "description": "ID of the requested upload",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete an upload",
                "tags": [
                    "Uploads"
                ]
            },
            "get": {
                "operationId": "get_uploads_id",
                "parameters": [
                    {
                        "description": "ID of the requested upload",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a specific upload",
                "tags": [
                    "Uploads"
                ]
            }
        },
        "/users": {
            "get": {
                "operationId": "get_users",
                "parameters": [
                    {
                        "description": "Filter users by first name",
                        "in": "query",
                        "name": "first_name",
                        "type": "string"
                    },
                    {
                        "description": "Filter users by last name",
                        "in": "query",
                        "name": "last_name",
                        "type": "string"
                    },
                    {
                        "description": "Search across first name and last name",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "Filter users by company ID. Only portal members have a company ID.",
                        "format": "int64",
                        "in": "query",
                        "name": "portal_member_company_id",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by archived status",
                        "in": "query",
                        "name": "archived",
                        "type": "boolean"
                    },
                    {
                        "description": "Filter users by email address",
                        "format": "email",
                        "in": "query",
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "description": "Filter users by security level. Security levels are 'super_admin', 'admin', 'spectator', 'editor', 'author', 'portal_member', and 'portal_admin'",
                        "in": "query",
                        "name": "security_level",
                        "type": "string"
                    },
                    {
                        "description": "The current page of results to retrieve",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "The number of results to return per page",
                        "format": "int32",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/User"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Retrieve a list of users",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve a user by its ID.",
                "operationId": "get_user_by_id",
                "parameters": [
                    {
                        "description": "ID of the requested user",
                        "format": "int64",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "summary": "Retrieve a user by ID",
                "tags": [
                    "Users"
                ]
            }
        },
        "/websites": {
            "get": {
                "operationId": "get_websites",
                "parameters": [
                    {
                        "description": "Get current page of results",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Filter websites by name",
                        "in": "query",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "description": "Number of results to return per page",
                        "in": "query",
                        "name": "page_size",
                        "type": "integer"
                    },
                    {
                        "description": "Filter by URL slug",
                        "in": "query",
                        "name": "slug",
                        "type": "string"
                    },
                    {
                        "description": "Filter by search query",
                        "in": "query",
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "description": "Filter websites updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters websites updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters websites updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters websites updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'",
                        "in": "query",
                        "name": "updated_at",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of websites",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Website"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a list of all websites",
                "tags": [
                    "Websites"
                ]
            },
            "post": {
                "operationId": "post_websites",
                "parameters": [
                    {
                        "in": "body",
                        "name": "website",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "Used to associate website with company",
                                    "type": "integer"
                                },
                                "disable_dns": {
                                    "description": "When true, DNS monitoring is paused",
                                    "type": "boolean"
                                },
                                "disable_ssl": {
                                    "description": "When true, SSL certificate monitoring is paused",
                                    "type": "boolean"
                                },
                                "disable_whois": {
                                    "description": "When true, WHOIS monitoring is paused",
                                    "type": "boolean"
                                },
                                "name": {
                                    "description": "The name or URL of the website",
                                    "type": "string"
                                },
                                "notes": {
                                    "description": "Add additional notes to a website",
                                    "type": "string"
                                },
                                "paused": {
                                    "description": "When true, website monitoring is paused",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Create a Website",
                "tags": [
                    "Websites"
                ]
            }
        },
        "/websites/{id}": {
            "delete": {
                "operationId": "delete_websites_id",
                "parameters": [
                    {
                        "description": "ID of the requested website",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Delete a Website",
                "tags": [
                    "Websites"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "get_websites_id",
                "parameters": [
                    {
                        "description": "ID of the requested website",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Website"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "summary": "Get a Website",
                "tags": [
                    "Websites"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_websites_id",
                "parameters": [
                    {
                        "description": "ID of the requested website",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "in": "body",
                        "name": "website",
                        "required": true,
                        "schema": {
                            "properties": {
                                "company_id": {
                                    "description": "Used to associate website with company",
                                    "type": "integer"
                                },
                                "disable_dns": {
                                    "description": "When true, DNS monitoring is paused",
                                    "type": "boolean"
                                },
                                "disable_ssl": {
                                    "description": "When true, SSL certificate monitoring is paused",
                                    "type": "boolean"
                                },
                                "disable_whois": {
                                    "description": "When true, WHOIS monitoring is paused",
                                    "type": "boolean"
                                },
                                "name": {
                                    "description": "The name or URL of the website",
                                    "type": "string"
                                },
                                "notes": {
                                    "description": "Add additional notes to a website",
                                    "type": "string"
                                },
                                "paused": {
                                    "description": "When true, website monitoring is paused",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Website"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "summary": "Update a Website",
                "tags": [
                    "Websites"
                ]
            }
        }
    },
    "schemes": [
        "https",
        "http"
    ],
    "security": [
        {
            "APIKeyHeader": [
            ]
        }
    ],
    "securityDefinitions": {
        "APIKeyHeader": {
            "in": "header",
            "name": "x-api-key",
            "type": "apiKey"
        }
    },
    "swagger": "2.0",
    "tags": [
    ]
}